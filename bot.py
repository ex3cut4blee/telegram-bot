import os
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, Text
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
user_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë üòä"), KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòä")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=user_keyboard
    )

@dp.message(Text("–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë üòä"))
async def new_message(message: types.Message):
    await message.answer("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=user_keyboard)

@dp.message(Text("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòä"))
async def delete_message(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_messages:
        try:
            await bot.delete_message(chat_id=user_id, message_id=user_messages[user_id]['message_id'])
            del user_messages[user_id]
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=user_keyboard)
        except Exception as e:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=user_keyboard)
    else:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=user_keyboard)

@dp.message()
async def handle_all_messages(message: types.Message):
    user = message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_messages[user.id] = {
        'text': message.text or "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ",
        'message_id': message.message_id
    }
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
        reply_markup=user_keyboard
    )
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    try:
        if message.text:
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username}):\n\n{message.text}"
            )
        else:
            await message.forward(ADMIN_CHAT_ID)
            await bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì® –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username})"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=user_keyboard)

async def main():
    logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())