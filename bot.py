import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_user_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë üòä"))
    keyboard.add(KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòä"))
    return keyboard

@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=get_user_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë üòä")
def new_message(message):
    bot.send_message(message.chat.id, "‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=get_user_keyboard())

@bot.message_handler(func=lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòä")
def delete_message(message):
    user_id = message.from_user.id
    if user_id in user_messages:
        try:
            bot.delete_message(user_id, user_messages[user_id]['message_id'])
            del user_messages[user_id]
            bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_user_keyboard())
        except Exception as e:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=get_user_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=get_user_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user = message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_messages[user.id] = {
        'text': message.text or "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ", 
        'message_id': message.message_id
    }
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        message.chat.id,
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
        reply_markup=get_user_keyboard()
    )
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    try:
        if message.text:
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username}):\n\n{message.text}"
            )
        else:
            bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
            bot.send_message(
                ADMIN_CHAT_ID,
                f"üì® –ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (@{user.username})"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=get_user_keyboard())

if __name__ == "__main__":
    print("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.infinity_polling()