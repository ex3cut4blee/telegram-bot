import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
user_messages = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
user_keyboard = ReplyKeyboardMarkup([
    ["–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë üòä", "–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòä"]
], resize_keyboard=True)

def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=user_keyboard
    )

def handle_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_messages[user.id] = {
        'text': update.message.text or "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ",
        'message_id': update.message.message_id
    }
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    update.message.reply_text(
        "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!",
        reply_markup=user_keyboard
    )
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É
    try:
        if update.message.text:
            context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}:\n\n{update.message.text}"
            )
        else:
            update.message.forward(ADMIN_CHAT_ID)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def delete_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    if user.id in user_messages:
        try:
            context.bot.delete_message(
                chat_id=user.id,
                message_id=user_messages[user.id]['message_id']
            )
            update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=user_keyboard)
        except Exception as e:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=user_keyboard)
    else:
        update.message.reply_text("‚ùå –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å", reply_markup=user_keyboard)

def new_message(update: Update, context: CallbackContext):
    update.message.reply_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=user_keyboard)

def main():
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(MessageHandler(Filters.regex("–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë üòä"), new_message))
    dispatcher.add_handler(MessageHandler(Filters.regex("–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ üòä"), delete_message))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    print("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()